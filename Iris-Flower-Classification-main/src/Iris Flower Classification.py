# -*- coding: utf-8 -*-
"""DL Lab 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WKqUuSwj4UUnAc6VGSsUwktSPqE3CPPP

# 1) Implement Perceptron training algorithm to classify flowers in IRIS dataset.
"""

# Importing Packages
import matplotlib.pyplot as plt
import numpy as np
import keras
from keras.models import Sequential
from keras.layers import Dense
from sklearn import datasets
from sklearn.metrics import accuracy_score, confusion_matrix  # Add this line

# Fetching data from the Iris Dataset
data=datasets.load_iris()
print(data)
x=data.data
y=data.target
z=data.target_names
print(data.feature_names)
print(x[0])

# Buliding model and Spliting the data into Train and Test data
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.5)
print(x_train.shape)
print(x_test.shape)
model = Sequential()
model.add(Dense(100,input_dim=(4),activation="relu"))
model.add(Dense(3,activation="softmax"))
model.compile(optimizer="adam",loss="sparse_categorical_crossentropy",metrics=["accuracy"])
model.fit(x_train,y_train,epochs=20)
model.evaluate(x_test,y_test)
pred = model.predict(x_test[:10])
print(pred)
p=np.argmax(pred,axis=1)
print(p)
print(y_test[:10])
for i in p:
  print("Predicted class : {} , Name : {}".format(i,x[i]))

# Evaluate the model on the test set
loss, accuracy = model.evaluate(x_test, y_test)
print(f'Test Loss: {loss:.4f}, Test Accuracy: {accuracy:.4f}')

# Making Predictions using the model
pred = model.predict(x_test)
y_pred = np.argmax(pred, axis=1)

# Calculate accuracy
acc = accuracy_score(y_test, y_pred)
print(f'Accuracy: {acc:.4f}')

# Calculate confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print('Confusion Matrix:')
print(conf_matrix)