# -*- coding: utf-8 -*-
"""DL Lab 6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KZZL6JQYBlKHRUJx476P6fWWwFSsGL1A

# 6) Design a model for MNIST hand written digit classification using Deep Convolution Neural networks.
"""

# Commented out IPython magic to ensure Python compatibility.
#Importing Packages
import keras
from keras.models import Sequential
from keras.layers import Dense , Flatten
import matplotlib.pyplot as plt
# %matplotlib inline
import numpy as np

#Import the Dataset
from keras.datasets import mnist
(train_img , train_lab) , (test_img , test_lab) = mnist.load_data()

#Normalize Dataset
train_img = keras.utils.normalize(train_img , axis=1)
test_img = keras.utils.normalize(test_img , axis=1)

#Building the Model
model = Sequential()
model.add(Flatten(input_shape=(28,28)))
model.add(Dense(300,activation='relu'))
model.add(Dense(200,activation='relu'))
model.add(Dense(100,activation='relu'))
model.add(Dense(10,activation='softmax'))

#Summary of the Model
model.summary()

#Compiling the Model
model.compile(optimizer='adam' , loss='sparse_categorical_crossentropy' , metrics=['accuracy'])

#Fitting Model
model.fit(train_img , train_lab , epochs=10)
model.save('model.h5')

#Evaluation of Model
print(model.evaluate(test_img , test_lab))

#Predict the First 10 images
pred = model.predict(test_img[:10])
#print(pred)
p = np.argmax(pred , axis=1)
print(p)
print(test_lab[:10])

#Visualizing Prediction
for i in range(10):
  plt.imshow(test_img[i] , cmap = 'binary')
  plt.title("Original : {} , Predicted : {}".format(test_lab[i] , p[i]))
  plt.axis("off")
  plt.figure()

# Generate Confusion Matrix and Analysis
from sklearn.metrics import confusion_matrix, classification_report
import seaborn as sns

# Evaluate the model
test_predictions = model.predict(test_img)
conf_matrix = confusion_matrix(test_lab, np.argmax(test_predictions, axis=1))

# Display confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", xticklabels=range(10), yticklabels=range(10))
plt.title("Confusion Matrix")
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()

# Analyze the confusion matrix
classification_rep = classification_report(test_lab, np.argmax(test_predictions, axis=1))
print("Classification Report:\n", classification_rep)

# Fitting Model
model.fit(train_img, train_lab, epochs=10)

# Evaluation of Model
accuracy = model.evaluate(test_img, test_lab)[1]
print("Model Accuracy:", accuracy)